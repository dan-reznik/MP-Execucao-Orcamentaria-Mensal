first2
first2 <- read_lines(fname1_txt,n_max=2,
locale=locale_bra) %>%
str_squish()
first2
first2 %>% cnt_seps(";")
read_lines(fname1_txt,locale=locale_bra) %>%
cnt_seps(";")
melt_delim(fname1_txt,
delim=fixed(";"),
locale=locale_bra,
n_max=100,
trim_ws = T,
skip_empty_rows = T) %>%
write_delim("tests/melt100.txt",delim='|')
df_melt1 <- melt_delim(fname1_txt
,delim=fixed(";")
,locale=locale_bra
,quote="@"
,trim_ws = T
,skip_empty_rows = T
) %>%
count(row,name="seps") %>%
group_by(seps) %>%
summarize(n=n(),row_list=if_else(n()<20,
str_c(row,collapse=","),
NA_character_))
df_melt1
cnt_seps_df(fname1_txt,locale_bra,";",45,5)
bad_lines <- read_lines(fname1_txt,locale=locale_bra)%>%
keep(~str_count(.x,fixed(";"))!=45)
c(first2[1],bad_lines)%>%write_lines("tests/bad_lines.txt")
{
lgts<-c(first2,bad_lines)%>%str_split(fixed(";"))%>%map_int(length)
cols<-str_c(c(letters,LETTERS),lgts)
df_transp <- c(first2,bad_lines)%>%
str_split(fixed(";"))%>%
map2(lgts,~c(.x,rep(NA,49-.y))) %>%
{l<-.;do.call(data.frame,l%>%set_names(cols%>%head(length(l))))}
df_transp%>%write_delim('tests/bad_lines_transp.txt',delim="|")
}
read_delim("tests/bad_lines_transp.txt",
delim=fixed("|")) %>%
mutate_all(~str_sub(.,end=10))
#%>%View
trunc_cols(fname1_txt,locale_bra,
max_cols=46,n_max=10)%>%
cnt_seps(";")
fnames <- zip_list(fname_zip) %>% pull(filename)
repl_ext(fnames,"rds") %>%
dir_slash_fname(data_dir,.) %>%
walk(~if(file_exists(.))file_delete(.))
tic()
plan(multiprocess)
# fnames[2] %>%
fnames %>% future_map_chr(unzip_trunc_rds,
fname_zip,data_dir,locale_bra,45)
toc()
fname_rds1 <- dir_ls(data_dir,regexp="MP_EMPENHOS.*rds") %>%
sort %>%
first
df_rds1 <- fname_rds1 %>% read_rds
dim(df_rds1)
source('~/Dropbox/Data Science/R Projects/MP-Execucao-Mensal/util.R', echo=TRUE)
df_rds1 %>% get_card
fnames_rds <- dir_ls(path=data_dir,regexp="\\d{6}\\.rds$")
df_all <- fnames_rds %>%
map_dfr(read_rds) %>%
mutate_if(is.character,as.factor) %>%
arrange(Data)
fnames_rds %>% walk(file_delete)
df_all %>%
arrange(Data) %>%
write_rds(dir_slash_fname(data_dir,"MP_EMPENHOS_ALL.rds"),
compress="bz")
unlink('preparo_mensal_cache', recursive = TRUE)
1:10 %>% tail(-1)
library(magrittr); 1:10 %>% tail(-1)
read_rds("data/MP_EMPENHOS_ALL.rds") %>% filter(year(Data)==2014,month(Data)==01) -> df1
readr::read_rds("data/MP_EMPENHOS_ALL.rds") %>% filter(year(Data)==2014,month(Data)==01) -> df1
library(lubridate);readr::read_rds("data/MP_EMPENHOS_ALL.rds") %>% filter(year(Data)==2014,month(Data)==01) -> df1
library(lubridate);readr::read_rds("data/MP_EMPENHOS_ALL.rds") %>% filter(year(Data)==2014,month(Data)==01) %>% colnames
library(dplyr);library(readr)
library(lubridate);readr::read_rds("data/MP_EMPENHOS_ALL.rds") %>% filter(year(Data)==2014,month(Data)==01) -> df1
df1%>%write_rds("data/MP_EMPENHOS_201401.rds",compress = "gz")
unlink('preparo_mensal_cache', recursive = TRUE)
library(tidyverse)
library(lubridate)
library(fs)
library(stringi) # for %s+%
library(furrr)
library(zip)
library(tictoc)
source("util.R")
fname_rds1 <- dir_ls(data_dir,regexp="MP_EMPENHOS_\\d{6}.*rds") %>%
sort %>%
first
data_dir <- "data"
dir_ls(data_dir,regexp=".*zip")
data_dir <- "data"
dir_ls(data_dir,regexp=".*zip")
fname_rds1 <- dir_ls(data_dir,regexp="MP_EMPENHOS_\\d{6}.*rds") %>%
sort %>%
first
df_rds1 <- fname_rds1 %>% read_rds
dim(df_rds1)
glimpse(df_rds1)
df_rds1 %>% get_card
df_rds1 %>% get_card_fact
library(tidyverse)
library(lubridate)
library(fs)
library(stringi) # for %s+%
library(furrr)
library(zip)
library(tictoc)
source("util.R")
fs::file_size(fname_zip)
fname_rds <- "MP_EMPENHOS_ALL.rds"
df_all %>%
write_rds(dir_slash_fname(data_dir,fname_rds),
compress="bz")
fname_rds <- "MP_EMPENHOS_ALL.rds"
fs::file_size(fname_zip)
fname_zip <- dir_slash_fname(data_dir,"Despesas MRJ.zip")
knitr::opts_chunk$set(
cache=T,
collapse=T,
comment="#>",
dpi=96
)
library(tidyverse)
library(lubridate)
library(fs)
library(stringi) # for %s+%
library(furrr)
library(zip)
library(tictoc)
source("util.R")
data_dir <- "data"
dir_ls(data_dir,regexp=".*zip")
fname_zip <- dir_slash_fname(data_dir,"Despesas MRJ.zip")
fnames_in_zip <- zip_list(fname_zip)
fnames_in_zip
fs::file_size(fname_zip)
fs::file_size(fname_rds)
fname_rds <- dir_slash_fname(data_dir,"MP_EMPENHOS_ALL.rds")
file_size(fname_zip)
ffile_size(fname_rds)
file_size(fname_zip)
file_size(fname_rds)
library(tidyverse)
library(lubridate)
library(fs)
library(stringi) # for %s+%
library(furrr)
library(zip)
library(tictoc)
library(glue)
source("util.R")
glue("{fname_zip}: {file_size(fname_zip)}\n",
"{fname_rds}: {file_size(fname_rds)}\n")
fname1_txt
glue("{fname_zip}: {file_size(fname_zip)}\n",
"{fname1_txt}: {file_size(fname1_txt)\n",
"{fname_rds}: {file_size(fname_rds)}\n")
fname_zip <- dir_slash_fname(data_dir,"Despesas MRJ.zip")
fnames_in_zip <- zip_list(fname_zip)
fnames_in_zip
fname1_txt <- dir_slash_fname(data_dir,fname1) %>%
path_norm
library(tidyverse)
library(lubridate) # dates
library(fs) # file system
library(stringi) # for %s+%
library(furrr) # parallel processing
library(zip) # zip files
library(tictoc) # timing
library(glue) # string interpolation
source("util.R") # low-level functionality
fname1_txt <- dir_slash_fname(data_dir,fname1) %>%
path_norm
fname1 <- fnames_in_zip$filename[1]
zip::unzip(fname_zip,files=fname1,exdir=data_dir)
dir_ls(data_dir,regexp="*.TXT")
fname1_txt <- dir_slash_fname(data_dir,fname1) %>%
path_norm
guess_encoding(fname1_txt)
glue("{fname_zip}: {file_size(fname_zip)}\n",
"{fname1_txt}: {file_size(fname1_txt)\n",
"{fname_rds}: {file_size(fname_rds)}\n")
glue("{fname_zip}: {file_size(fname_zip)}\n",
"{fname1_txt}: {file_size(fname1_txt)\n",
"{fname_rds}: {file_size(fname_rds)}\n")
glue("{fname_zip}: {file_size(fname_zip)}\n",
"{fname1_txt}: {file_size(fname1_txt)}\n",
"{fname_rds}: {file_size(fname_rds)}\n")
c(fname_zip,fname1_txt,fname_rds) %>% map(file_size)
c(fname_zip,fname1_txt,fname_rds) %>% map(file_size) %>% names
c(zip=fname_zip,txt=fname1_txt,rds=fname_rds) %>% map(file_size)
c(zip=fname_zip,txt=fname1_txt,rds=fname_rds) %>% map_chr(file_size)
c(zip=fname_zip,txt=fname1_txt,rds=fname_rds) %>% map(file_size)
c(zip=fname_zip,txt=fname1_txt,rds=fname_rds) %>% map(file_size) %>%
as_tibble
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,size=file_size(.y)))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,size=file_size(.x)))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=name(.x),size=file_size(.x)))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=names(.x),size=file_size(.x)))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x),size=file_size(.x))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,
size=file_size(.x))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,
size=file_size(.x)))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,
size=file_size(.x)%>%as.character))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(name=.id,
file=.x,
size=file_size(.x)%>%as.character))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(name=..id,
file=.x,
size=file_size(.x)%>%as.character))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(name=..0,
file=.x,
size=file_size(.x)%>%as.character))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(name=..1,
file=.x,
size=file_size(.x)%>%as.character))
c(zip=fname_zip,
txt=fname1_txt,
rds=fname_rds) %>%
map_dfr(~tibble(file=.x,
size=file_size(.x)%>%as.character))
c(fname_zip,fname1_txt,fname_rds) %>%
map_dfr(~tibble(file=.x,
size=file_size(.x)%>%as.character))
library(tidyverse)
library(fs)
fs::dir_ls()
fs::dir_ls("data")
fs::dir_ls("data",regexp = ".TXT")
dir_ls("data",regexp = ".TXT")
fname <- dir_ls("data",regexp = ".TXT")
guess_encoding(fname)
read_lines(fname,n_max=1)
read_lines(fname,n_max=1) %>% str_split(";")
read_lines(fname,n_max=1) %>% str_split(fixed(";"))
read_lines(fname,n_max=1) %>% str_split(fixed(";")) %>% first
str_split("a;b;c",";")
str_split(c("a;b;c","d;e;f;g;h"),";")
read_lines(fname,n_max=1) %>%
str_split(fixed(";")) %>%
first
read_lines(fname,n_max=1) %>%
str_split(fixed(";")) %>%
first
first_line <- read_lines(fname,n_max=1)
first_line %>%
str_split(fixed(";")) %>%
first
desired_columns <- c("Poder", "Função" e "Valor")
desired_columns <- c("Poder", "Função"m "Valor")
desired_columns <- c("Poder", "Função", "Valor")
which(first_line%in%desired_columns)
desired_columns <- c("Poder", "Função", "Valor")
desired_columns %>% map_int(which, first_line)
desired_columns <- c("Poder", "Função", "Valor")
desired_columns %>% map_int(~which(.x==first_line))
desired_columns <- c("Poder", "Funcao", "Valor")
desired_columns %>% map_int(~which(.x==first_line))
first_line=="Poder"
first_line <- read_lines(fname,n_max=1)
first_line %>%
str_split(fixed(";")) %>%
first
first_line=="Poder"
first_line
first_line <- read_lines(fname,n_max=1) %>%
str_split(fixed(";")) %>%
first
first_line <- read_lines(fname,n_max=1) %>%
str_split(fixed(";")) %>%
first
first_line
desired_columns <- c("Poder", "Funcao", "Valor")
desired_columns %>% map_int(~which(.x==first_line))
which(c("a","b","c","a")=="a")
desired_columns <- c("Poder", "Funcao", "Valor")
which(first_line%in%desired_columns)
c("a","b","c","a") %in% c("x")
c("a","b","c","a") %in% c("a")
c("a","b","c","a") %in% c("a","c")
desired_columns <- c("Poder", "Funcao", "Valor")
desired_column_indices <- which(first_line %in% desired_columns)
desired_columns <- c("Poder", "Funcao", "Valor")
desired_column_indices <- which(first_line %in% desired_columns)
desired_column_indices
read_csv2(fname, n_max=10,
locale=locale_bra,
col_types = cols_only(Poder = 'c', Funcao = 'c', Valor = 'c'))
locale_bra <- locale(encoding="ISO-8859-1",
decimal_mark = ",",
date_format="%d/%m/%Y")
first_line <- read_lines(fname,n_max=1,locale=locale_bra) %>%
str_split(fixed(";")) %>%
first
first_line
first_line <- read_lines(fname,n_max=1,locale=locale_bra) %>%
str_split(fixed(";")) %>%
first
first_line
desired_columns <- c("Poder", "Funcao", "Valor")
desired_column_indices <- which(first_line %in% desired_columns)
desired_column_indices
read_csv2(fname, n_max=10,
locale=locale_bra,
col_types = cols_only(Poder = 'c', Funcao = 'c', Valor = 'c'))
read_csv2(fname, n_max=10,
locale=locale_bra,
col_types = cols_only(Poder = 'c', Funcao = 'c', Valor = 'd'))
read_csv2(fname, n_max=10,
locale=locale_bra,
col_types = cols_only(Poder = 'c', Funcao = 'i', Valor = 'd'))
read_csv2(fname, n_max=10,
locale=locale_bra,
col_types = cols_only(Poder = 'f', Funcao = 'i', Valor = 'd'))
desired_columns <- list(Poder="f", Funcao="i", Valor="d") # named list
desired_column_indices <- which(first_line %in% names(desired_columns))
desired_column_indices
desired_column_indices <- which(first_line %in% names(desired_columns))
desired_column_indices
which(first_line %in% names(desired_columns))
col_only(Poder="f")
cols_only(Poder="f")
do.call(cols_only,desired_columns)
# equivalente a cols_only(Posicao="i",Poder="c",...)
# do.call(cols_only,desired_columns)
cols_only(!!!desired_columns)
# equivalente a cols_only(Posicao="i",Poder="c",...)
# do.call(cols_only,desired_columns)
cols_only(!!desired_columns)
# equivalente a cols_only(Posicao="i",Poder="c",...)
# do.call(cols_only,desired_columns)
cols_only(!!!quote(desired_columns))
# equivalente a cols_only(Posicao="i",Poder="c",...)
# do.call(cols_only,desired_columns)
cols_only(!!! desired_columns)
read_delim(fname, n_max=10,
delim=fixed(";"),
trim_ws = T,
locale=locale_bra,
col_types = do.call(cols_only,desired_columns))
fname_vec <- dir_ls("data",regexp = "capitais\\d{2}\\.csv") %>%
as.character
fname_vec
df01 <- read_csv(fname_vec[1])
df01 %>% knitr::kable()
unlink('combina_arquivos_cache', recursive = TRUE)
knitr::opts_chunk$set(
cache=T,
collapse=T,
comment="#>",
dpi=96,
fig.align="center",
out.width='100%'
)
library(tidyverse)
library(fs)
library(zip)
fname_vec <- dir_ls("data_tutorials",regexp = "capitais\\d{2}\\.csv") %>%
as.character
fname_vec
df01 <- read_csv(fname_vec[1])
df01 %>% knitr::kable()
df02 <- read_csv(fname_vec[2])
df02 %>% knitr::kable()
df01 %>% bind_rows(df02)
df03 <- read_csv(fname_vec[3])
df03 %>% knitr::kable()
df01 %>%
bind_rows(df02) %>%
bind_rows(df03)
bind_rows(df01,df02,df03)
df_all <- fname_vec %>%
map_dfr(read_csv)
df_all %>% knitr::kable()
zipfile <- dir_ls("data",regexp="\\.zip$") %>% as.character
zipfile
fnames_zip <- zip_list(zipfile)
unzip_read_delete <- function(fname_csv,zipfile) {
unzip(zipfile,fname_csv)
df <- read_csv(fname_csv)
file_delete(fname_csv)
df # importante retornar um tibble q sera usado por map_dfr()
}
fnames_zip
zipfile <- dir_ls("data_tutorials",regexp="\\.zip$") %>% as.character
zipfile
knitr::opts_chunk$set(
cache=T,
collapse=T,
comment="#>",
dpi=96,
fig.align="center",
out.width='100%'
)
library(tidyverse)
library(fs)
library(zip)
fname_vec <- dir_ls("data_tutorials",regexp = "capitais\\d{2}\\.csv") %>%
as.character
fname_vec
df01 <- read_csv(fname_vec[1])
df01 %>% knitr::kable()
df02 <- read_csv(fname_vec[2])
df02 %>% knitr::kable()
df01 %>% bind_rows(df02)
df03 <- read_csv(fname_vec[3])
df03 %>% knitr::kable()
df01 %>%
bind_rows(df02) %>%
bind_rows(df03)
bind_rows(df01,df02,df03)
df_all <- fname_vec %>%
map_dfr(read_csv)
df_all %>% knitr::kable()
zipfile <- dir_ls("data_tutorials",regexp="\\.zip$") %>% as.character
zipfile
fnames_zip <- zip_list(zipfile)
unzip_read_delete <- function(fname_csv,zipfile) {
unzip(zipfile,fname_csv)
df <- read_csv(fname_csv)
file_delete(fname_csv)
df # importante retornar um tibble q sera usado por map_dfr()
}
fnames_zip
knitr::opts_chunk$set(
cache=T,
collapse=T,
comment="#>",
dpi=96,
fig.align="center",
out.width='100%'
)
library(tidyverse)
library(fs)
library(zip)
fname_vec <- dir_ls("data_tutorials",regexp = "capitais\\d{2}\\.csv") %>%
as.character
fname_vec
df01 <- read_csv(fname_vec[1])
df01 %>% knitr::kable()
df02 <- read_csv(fname_vec[2])
df02 %>% knitr::kable()
df01 %>% bind_rows(df02)
df03 <- read_csv(fname_vec[3])
df03 %>% knitr::kable()
df01 %>%
bind_rows(df02) %>%
bind_rows(df03)
bind_rows(df01,df02,df03)
df_all <- fname_vec %>%
map_dfr(read_csv)
df_all %>% knitr::kable()
zipfile <- dir_ls("data_tutorials",regexp="\\.zip$") %>% as.character
zipfile
fnames_zip <- zip_list(zipfile)
unzip_read_delete <- function(fname_csv,zipfile) {
unzip(zipfile,fname_csv)
df <- read_csv(fname_csv)
file_delete(fname_csv)
df # importante retornar um tibble q sera usado por map_dfr()
}
df_all_map <- fnames_zip$filename %>%
map_dfr(unzip_read_delete,zipfile)
# map_dfr(~unzip_read_delete(.x,zipfile))
unlink('combina_arquivos_cache', recursive = TRUE)
