---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
library(fs)
library(stringi) # for %s+%
library(furrr)
library(zip)
```

```{r util}
dir_slash_fname <- function(d,f) d%s+%"\\"%s+%f
```


```{r}
data_dir <- "C:\\Users\\dreznik\\Desktop\\mp execucao orcamentaria"
dir_ls(data_dir,regexp=".*zip")
```

```{r}
fname_zip <- dir_slash_fname(data_dir,"Despesas MRJ.zip")
zip::zip_list(fname_zip)
```

```{r}
fname1 <- "MP_EMPENHOS_201401.TXT"
zip::unzip(fname_zip,files=fname1,exdir=data_dir)
dir_ls(data_dir,regexp="*.TXT")
```

```{r}
fname1_txt <- dir_slash_fname(data_dir,fname1) %>%
  path_norm
```

```{r}
guess_encoding(fname1_txt)
```

Convert to UTF-8 (avoid read_lines nasty problem)

```{r}
locale_bra <- locale(encoding="ISO-8859-1")
#read_file(fname1_txt,locale=locale_bra)%>%
#  write_file(fname1_txt_utf8)
#guess_encoding(fname1_txt_utf8)
```

```{r}
first2 <- read_lines(fname1_txt,
                     locale=locale_bra,n_max=2)
first2
```

Count # of ";" for all lines in file

```{r}
read_lines(fname1_txt,locale=locale_bra)%>%
  str_count(fixed(";"))%>%
  table
```

Abnormal lines

```{r}
df_probs <- tibble(cnt=read_lines(fname1_txt,locale=locale_bra)%>%
  str_count(fixed(";")))%>%
  mutate(row=row_number())%>%
  filter(cnt!=45)%>%
  select(row,cnt) %>%
  arrange(cnt) #%>%
  #group_by(cnt) %>%
  #summarize(n=n(),
  #          rows=str_c(row,collapse=",")) 
df_probs
```

Report on what happens to row 14579, notice first match is much further

```{r}
{
# this is reading the incorrect line
r_skip<-read_lines(fname1_txt,locale=locale_bra,
                   skip=14578,n_max=1)
ls <- read_lines(fname1_txt,locale=locale_bra)
r_noskip<-ls[14579]
list(seps_skip=r_skip%>%str_count(fixed(";")),
     seps_nosk=r_noskip%>%str_count(fixed(";")),
     eqs=r_skip==r_noskip,
     match=which(ls==r_skip)) %>%
  {tibble(names=names(.),vals=as.character(.))}
}
```

```{r}
df_probs %>%
  count(cnt)
```

```{r}
bad_lines <- read_lines(fname1_txt,locale=locale_bra)%>%
  keep(~str_count(.x,fixed(";"))!=45)
```

Write it to file
```{r}
c(first2,bad_lines)%>%write_lines("bad_lines.txt")
```

Write transp:

```{r}
{
  lgts<-c(first2,bad_lines)%>%str_split(fixed(";"))%>%map_int(length)
  cols<-str_c(c(letters,LETTERS),lgts)
  df_transp <- c(first2,bad_lines)%>%
    str_split(fixed(";"))%>%
    map2(lgts,~c(.x,rep(NA,49-.y))) %>%
    {l<-.;do.call(data.frame,l%>%set_names(cols%>%head(length(l))))}
  df_transp%>%write_delim('bad_lines_transp.txt',delim="|")
}
```

Parece que as linhas que contÃ©m colunas adicionais podem ser ignoradas

```{r}
read_delim("bad_lines_transp.txt",
           delim=fixed("|")) #%>%View
```

Truncate columns to a max

```{r}
trunc_cols <- function(fname,locale,max_cols,sep=";",n_max=-1L)
  read_lines(fname,locale=locale,n_max=n_max)%>%
  str_split(fixed(sep)) %>%
  map(str_squish)%>%
  map(head,max_cols) %>% # trunc
  map_chr(str_c,collapse=sep) %>%
  str_c(collapse="\r\n")
# check if correct
trunc_cols(fname1_txt,locale_bra,
           max_cols=46,n_max=10)%>%
  read_lines %>%
  str_count(fixed(";"))%>%
  table
```

Convert file

```{r}
get_fname_utf8 <- function(fname) fname %>%
  str_extract("^.*(?=\\.TXT)")%>%
    str_c("_utf8.TXT")
repl_ext <- function(fname,ext) fname %>%
  str_replace("(?<=\\.)[:alpha:]+$",ext)
trunc_file <- function(fname,locale,max_cols) {
  fname_utf8 <- get_fname_utf8(fname) 
  trunc_cols(fname,locale,max_cols)%>%
  write_file(fname_utf8)
  fname_utf8
}
```

Corrects and re-reads
```{r}
trunc_to_rds <- function(fname_txt) {
  fname_utf8 <- trunc_file(fname_txt,locale_bra,45)
  df_fname <- read_delim(fname_utf8
                         ,delim=fixed(";")
                         ,quote="'"
                         #,col_types = cols(.default = "c")
                         ,col_types = cols(
                           # they are guesses as lgl because of
                           # multiple NAs in beginning
                           Liquidacao=col_character(),
                      
                           Pagamento=col_character()),
                        ) %>%
  mutate_if(is.character,as.factor)
  fname_rds <- fname_txt%>%repl_ext("rds") 
  df_fname %>% write_rds(fname_rds,compress="bz")
}
# test
# trunc_to_rds(fname1_txt)
```

Will convert all files in .zip

```{r}
plan(multiprocess)
fnames <- zip::zip_list(fname_zip) %>% pull(filename)
fnames %>% furrr::future_map_chr(~{
  print(.x)
  zip::unzip(fname_zip,files=.x,exdir=data_dir)
  trunc_to_rds(dir_slash_fname(data_dir,.x))
  f_txt <- dir_slash_fname(data_dir,.x)
  f_utf8 <- get_fname_utf8(f_txt)
  fs::file_delete(f_txt)
  fs::file_delete(f_utf8)
  .x
  })
```

Read all rds's places on single

```{r}
fnames_rds <- fs::dir_ls(path=data_dir,regexp=".*\\.rds")
df_all <- fnames_rds %>% map_dfr(~{
  print(.x)
  read_rds(.x) %>%
    mutate_at(vars(Elemento,SubFuncao,Valor,ContaCorrente),
              as.character)
  })
```

```{r}
df_all %>% 
  mutate_if(is.character,as.factor)%>%
  mutate(Data=dmy(Data))%>%
  arrange(Data) %>%
  write_rds(dir_slash_fname(data_dir,"Despesas MPRJ.rds"),
            compress="bz")
```



